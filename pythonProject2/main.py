import config
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.message import ContentType
import cv2
from parser import generate_qr
from db import prizers, insert_prizes, insert_user
import sqlite3
from aiogram.types import InputFile
from db import find_photo_names
import os
from db import counts


PRICE = types.LabeledPrice('–ë–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ', amount=200*100)
PRICE2 = types.LabeledPrice('1+1', amount=300*100)
PRICE3 = types.LabeledPrice('VIP', amount=300*100)
PRICE4 = types.LabeledPrice('Premium', amount=1400*100)
class ClientState(StatesGroup):
    '''–•—Ä–∞–Ω–∏—Ç –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∏–µ–Ω—Ç'''
    START_ORDER = State()
    INFO = State()
    NAME_SELECTED = State()
    BUY_TICKETONE = State()
    BUY_TICKETTWO = State()
    CHOOSETYPE = State()
    CHOOSETICKET = State()
    TRY_TO_PAY_1 = State()
    TRY_TO_PAY_2 = State()
    TRY_TO_PAY_3 = State()
    TRY_TO_PAY_4 = State()
    PRIZE = State()
    SUCCESFULLY_PAY = State()
    OTKAZ = State()
    OZHIDANIE = State()



bot = Bot(token=config.TELEGRAM_BOT_TOKEN)

# storage = RedisStorage2('localhost', 6379, db=5, pool_size=10, prefix='my_fsm_key')
# storage = MongoStorage(host='localhost', port=27017, db_name='aiogram_fsm')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['Start'])
async def start_proccess(message: types.Message, state: FSMContext) -> None:
    msg = '''–ü—Ä–∏–≤–µ—Ç! üëãü§ñ –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞ –Ω–∞ —Ç—É—Å–æ–≤–∫—É MOSHPIT'''

    buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
    info = KeyboardButton('–û –Ω–∞—Å')
    prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT')
    otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
    my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(buy_ticket, info)
    markup.row(prize, otzyv)
    markup.row(my_tickets)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_ORDER)


@dp.message_handler(state=ClientState.START_ORDER)
async def choose_doing(message: types.Message, state: FSMContext):
    user_msg = message.text
    if user_msg == '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç':
        await message.answer('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(ClientState.CHOOSETYPE)
    elif user_msg == '–û –Ω–∞—Å':
        await message.answer('–ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞, https://t.me/moshpit_yo')
        await state.set_state(ClientState.START_ORDER)
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(buy_ticket,prize)
        markup.row(otzyv, my_tickets)
        await message.answer('–ß—Ç–æ-—Ç–æ –µ—â—ë?', reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
    elif user_msg == '–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT':
        markup1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        true = KeyboardButton('–î–ê')
        false = KeyboardButton('–ù–ï–¢')
        markup1.row(true, false)
        await message.answer('–•–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?', reply_markup=markup1)
        await state.set_state(ClientState.PRIZE)
    elif message.text == '–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT':
        msg = '''–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(buy_ticket, info)
        markup.row(prize, my_tickets)
        await message.answer(msg, reply_markup=markup)
    elif message.text == '–ú–æ–∏ –±–∏–ª–µ—Ç—ã':
        msg2 = '–¢—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª'
        user1 = f'{message.from_user.id}' + '_standart.jpg'
        user2 = f'{message.from_user.id}' + '_1+1.jpg'
        uservip = f'{message.from_user.id}' + '_vip.jpg'
        userpremium = f'{message.from_user.id}' + '_premium.jpg'
        tickets1 = find_photo_names(user1)
        tickets2 = find_photo_names(user2)
        tickets3 = find_photo_names(uservip)
        tickets4 = find_photo_names(userpremium)
        if len(tickets1) != 0:
            count = counts(message.from_user.id, 'standart')
            await message.answer(f'–ë–∏–ª–µ—Ç—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : {count}')
            for standart in tickets1:
                photo = InputFile(f'qr_codes/{standart}')
                await bot.send_photo(chat_id=message.chat.id, photo=photo)
        if len(tickets2) != 0:
            count = counts(message.from_user.id, '1+1')
            await message.answer(f'–ë–∏–ª–µ—Ç—ã 1+1, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : {count}')
            for oneone in tickets1:
                photo = InputFile(f'qr_codes/{oneone}')
                await bot.send_photo(chat_id=message.chat.id, photo=photo)
        if len(tickets3) != 0:
            count = counts(message.from_user.id, 'vip')
            await message.answer(f'–ë–∏–ª–µ—Ç—ã 1+1, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : {count}')
            for oneone in tickets1:
                photo = InputFile(f'qr_codes/{oneone}')
                await bot.send_photo(chat_id=message.chat.id, photo=photo)
        if len(tickets4) != 0:
            count = counts(message.from_user.id, 'premium')
            await message.answer(f'–ë–∏–ª–µ—Ç—ã Premium, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ : {count}')
            for oneone in tickets1:
                photo = InputFile(f'qr_codes/{oneone}')
                await bot.send_photo(chat_id=message.chat.id, photo=photo)
        if (len(tickets1) == 0) and (len(tickets3) == 0) and (len(tickets4) == 0) and (len(tickets2) == 0):
            await message.answer('–í—ã –µ—â—ë –Ω–µ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç—ã')
        msg = '''–ñ–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –µ—â—ë?'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(buy_ticket, info)
        markup.row(prize, otzyv)
        await message.answer(msg, reply_markup=markup)
    else:
        await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É')

@dp.message_handler(state=ClientState.PRIZE)
async def prize_answer(message: types.Message, state: FSMContext):
    user_msg = message.text
    if user_msg == '–î–ê':
        try:
            insert_prizes(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
            buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
            info = KeyboardButton('–û –Ω–∞—Å')
            otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
            my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
            markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.row(buy_ticket, info)
            markup.row(my_tickets, otzyv)
            await message.answer(' –¢—ã –∑–∞–ø–∏—Å–∞–Ω –≤ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', reply_markup=markup)
            await state.set_state(ClientState.START_ORDER)
        except ValueError as e:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        await state.set_state(ClientState.START_ORDER)
    elif user_msg == '–ù–ï–¢':
        await message.answer('–¢–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ,\n')
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(buy_ticket, info)
        markup.row(my_tickets, otzyv)
        await message.answer('–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö', reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
    else:
        await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É')
        await state.set_state(ClientState.PRIZE)
@dp.message_handler(state=ClientState.CHOOSETYPE)
async def choose(message: types.Message, state: FSMContext):
    msg = '–í—ã–±–µ—Ä–∏ –±–∏–ª–µ—Ç'
    one = KeyboardButton('–ë–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ')
    two = KeyboardButton('–ë–∏–ª–µ—Ç 1+1')
    vip = KeyboardButton('VIP –±–∏–ª–µ—Ç')
    premium = KeyboardButton('Premium –±–∏–ª–µ—Ç')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(one, two)
    markup.row(vip, premium)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.CHOOSETICKET)
@dp.message_handler(state=ClientState.CHOOSETICKET)
async def choose_ticket(message: types.Message, state: FSMContext):
    if message.text == '–ë–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ':
        await message.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ QR-–∫–æ–¥\n–¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        await bot.send_invoice(message.chat.id, '–ë–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ',
                            '–ë–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ',
                            provider_token=config.PAY_TOCKEN,
                            currency='rub',
                            prices=[PRICE],
                            start_parameter='one-people-ticket',
                            payload='payload')
        otmena = KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(otmena)
        await message.answer('–û—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        await state.set_state(ClientState.TRY_TO_PAY_1)
    elif message.text == '–ë–∏–ª–µ—Ç 1+1':
        await message.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ QR-–∫–æ–¥\n–¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        await bot.send_invoice(message.chat.id, '–ë–∏–ª–µ—Ç –¥–ª—è –¥–≤–æ–∏—Ö',
                               '–° –¥—Ä—É–≥–æ–º –≤—Å–µ–≥–¥–∞ –≤–µ—Å–µ–ª–µ–µ)',
                               provider_token=config.PAY_TOCKEN,
                               currency='rub',
                               prices=[PRICE2],
                               start_parameter='oneone-people-ticket',
                               payload='payload')
        otmena = KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(otmena)
        await message.answer('–û—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        await state.set_state(ClientState.TRY_TO_PAY_2)
    elif message.text == 'VIP –±–∏–ª–µ—Ç':
        await message.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ QR-–∫–æ–¥\n–¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        await bot.send_invoice(message.chat.id, '–†–∞–Ω–Ω–∏–π –≤—Ö–æ–¥',
                               '–ü—Ä–æ—Ö–æ–¥–∫–∞ —Ä–∞–Ω—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö',
                               provider_token=config.PAY_TOCKEN,
                               currency='rub',
                               prices=[PRICE3],
                               start_parameter='one-people-ticket',
                               payload='payload')
        otmena = KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(otmena)
        await message.answer('–û—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        await state.set_state(ClientState.TRY_TO_PAY_3)
    elif message.text == 'Premium –±–∏–ª–µ—Ç':
        await message.answer(f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ QR-–∫–æ–¥\n–¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
        await bot.send_invoice(message.chat.id, '–°—Ç–æ–ª–∏–∫ –¥–ª—è 6 —á–µ–ª–æ–≤–µ–∫',
                               '–ü—Ä–æ—Ö–æ–¥–∫–∞ —Ä–∞–Ω—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö',
                               provider_token=config.PAY_TOCKEN,
                               currency='rub',
                               prices=[PRICE4],
                               start_parameter='one-people-ticket',
                               payload='payload')
        otmena = KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row(otmena)
        await message.answer('–û—Ç–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
        await state.set_state(ClientState.TRY_TO_PAY_4)
    else:
        await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É')
        await state.set_state(ClientState.CHOOSETICKET)

@dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'], state=ClientState.TRY_TO_PAY_1)
async def otmena(message : types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 3)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-2)
        msg = '''–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–ª–∞—Ç—ë–∂'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup.row(buy_ticket, info)
        markup.row(prize, otzyv)
        markup.row(my_tickets)
        await message.answer(msg, reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
@dp.pre_checkout_query_handler(lambda query: True, state=ClientState.TRY_TO_PAY_1)
async def pre_checkout_query(pre_chekout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_chekout_q.id, ok=True)
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=ClientState.TRY_TO_PAY_1)
async def successful_payment(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    payment_info = message.successful_payment.to_python()
    generate_qr(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'standart')
    insert_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'standart')
    photo = InputFile(f'qr_codes/{message.from_user.id}_standart.jpg')
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    msg = '''–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ'''
    buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
    info = KeyboardButton('–û –Ω–∞—Å')
    prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
    my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
    markup.row(buy_ticket, info)
    markup.row(prize, otzyv)
    markup.row(my_tickets)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_ORDER)
@dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'], state=ClientState.TRY_TO_PAY_2)
async def otmena(message : types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 3)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-2)
        msg = '''–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–ª–∞—Ç—ë–∂'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup.row(buy_ticket, info)
        markup.row(prize, otzyv)
        markup.row(my_tickets)
        await message.answer(msg, reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
@dp.pre_checkout_query_handler(lambda query: True, state=ClientState.TRY_TO_PAY_2)
async def pre_checkout_query(pre_chekout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_chekout_q.id, ok=True)
#2
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=ClientState.TRY_TO_PAY_2)
async def successful_payment(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    payment_info = message.successful_payment.to_python()
    generate_qr(message.from_user.id, message.from_user.username, message.from_user.first_name,message.from_user.last_name, '1+1')
    insert_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, '1+1')
    photo = InputFile(f'qr_codes/'f'{message.from_user.id}_1+1.jpg')
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    msg = '''–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç 1+1'''
    buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
    info = KeyboardButton('–û –Ω–∞—Å')
    prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
    my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
    markup.row(buy_ticket, info)
    markup.row(prize, otzyv)
    markup.row(my_tickets)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_ORDER)
@dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'], state=ClientState.TRY_TO_PAY_3)
async def otmena(message : types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 3)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-2)
        msg = '''–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–ª–∞—Ç—ë–∂'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup.row(buy_ticket, info)
        markup.row(prize, otzyv)
        markup.row(my_tickets)
        await message.answer(msg, reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
@dp.pre_checkout_query_handler(lambda query: True, state=ClientState.TRY_TO_PAY_3)
async def pre_checkout_query(pre_chekout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_chekout_q.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=ClientState.TRY_TO_PAY_3)
async def successful_payment(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    payment_info = message.successful_payment.to_python()
    generate_qr(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'vip')
    insert_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'vip')
    photo = InputFile(f'qr_codes/{message.from_user.id}_vip.jpg')
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    msg = '''–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –Ω–∞ —Ä–∞–Ω–Ω–∏–π –≤—Ö–æ–¥'''
    buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
    info = KeyboardButton('–û –Ω–∞—Å')
    prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSPIT')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
    my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
    markup.row(buy_ticket, info)
    markup.row(prize, otzyv)
    markup.row(my_tickets)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_ORDER)
@dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'], state=ClientState.TRY_TO_PAY_4)
async def otmena(message : types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 3)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-2)
        msg = '''–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–ª–∞—Ç—ë–∂'''
        buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
        info = KeyboardButton('–û –Ω–∞—Å')
        prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
        my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
        markup.row(buy_ticket, info)
        markup.row(prize, otzyv)
        markup.row(my_tickets)
        await message.answer(msg, reply_markup=markup)
        await state.set_state(ClientState.START_ORDER)
@dp.pre_checkout_query_handler(lambda query: True, state=ClientState.TRY_TO_PAY_4)
async def pre_checkout_query(pre_chekout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_chekout_q.id, ok=True)

#4
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=ClientState.TRY_TO_PAY_4)
async def successful_payment(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    payment_info = message.successful_payment.to_python()
    generate_qr(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'premium')
    insert_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name, 'premium')
    photo = InputFile(f'qr_codes/{message.from_user.id}_premium.jpg')
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    msg = '''–°—Ç–æ–ª–∏–∫ –Ω–∞ 6 —á–µ–ª–æ–≤–µ–∫\n–∫–ª–∞—Å—Å–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞)'''
    buy_ticket = KeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç')
    info = KeyboardButton('–û –Ω–∞—Å')
    prize = KeyboardButton('–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç MOSHPIT')
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    otzyv = KeyboardButton('–û—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ –∏ MOSHPIT')
    my_tickets = KeyboardButton('–ú–æ–∏ –±–∏–ª–µ—Ç—ã')
    markup.row(buy_ticket, info)
    markup.row(prize, otzyv)
    markup.row(my_tickets)
    await message.answer(msg, reply_markup=markup)
    await state.set_state(ClientState.START_ORDER)
if __name__ == '__main__':
    executor.start_polling(dp)
